name: Deployment pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize ]
jobs:
  pipeline:
    if: ${{ github.event_name != 'push'}}
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
        working-directory: ./app
    env:
      SECRET_KEY: "somesecretkeyfortesting"
      ALGORITHM: "HS256"
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      MONGODB_CONNECTION_URI_TEST: ${{ secrets.MONGODB_CONNECTION_URI_TEST }}
      DB_NAME_TEST: ${{ secrets.DB_NAME_TEST }}
      ADMIN_EMAIL: "test@test.test"
      ADMIN_PASSWORD: "test123Passw0rd"
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          architecture: 'x64' # verify!
      - name: Install dependencies
        run: pip install -r ./requirements.txt
      - name: Install dev dependencies
        run: pip install -r ./requirements_dev.txt
      - name: Lint check with flake8
        run: flake8 .
      - name: Test with pytest
        run: pytest
#  tag_release:
#    if: ${{ github.event_name == 'push' && !contains(join(github.event.commits.*.message),'#skip') }}
#    needs: [ pipeline ]
#    runs-on: ubuntu-20.04
#    steps:
#      - uses: actions/checkout@v3
#      - name: Bump version and push tag
#        uses: anothrNick/github-tag-action@1.67.0
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          WITH_V: false
#          INITIAL_VERSION: 0.0.0 # default
#          DEFAULT_BUMP: patch # by default, increase the last number
  publish-ecr:
    name: Publish image to AWS ECR
    if: ${{ github.event_name == 'push' && !contains(join(github.event.commits.*.message),'#skip') }}
#    needs: [ pipeline ]
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'eu-central-1'
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          REPOSITORY: aqvis-backend
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          cd app
          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
#      - name: Fill in the new image ID in the Amazon ECS task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: aqvis_api-task-definition.json
#          container-name: aqvis_api
#          image: ${{ steps.build-image.outputs.image }}
#      - name: Deploy Amazon ECS task definition
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: nodejs-app-service
#          cluster: DevCluster
#          wait-for-service-stability: true
  publish-docker-hub:
    name: Publish image to Docker Hub
    if: ${{ github.event_name == 'push' && !contains(join(github.event.commits.*.message),'#skip') }}
#    needs: [ pipeline ]
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout to the repository
        uses: actions/checkout@v4 # checkout to the repository
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: "{{defaultContext}}:app"
          push: true
          tags: drohal3/cpcvis-backend:latest
  notify:
    if: ${{ github.event_name == 'push' && !contains(join(github.event.commits.*.message),'#skip') }}
    needs: [ publish-docker-hub, publish-ecr ]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: notify success
        if: ${{ success() }}
        uses: rjstone/discord-webhook-notify@v1
        with:
          severity: info
          text: New version of aqvis-backend image published
          description: By ${{ github.triggering_actor }}
          details: Published successfully!
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
      - name: notify fail
         #  TODO: fix notify on failure
        if: ${{ !success() }}
        uses: rjstone/discord-webhook-notify@v1
        with:
          severity: error
          text: New version of aqvis-backend image could not be published!
          description: Triggered by ${{ github.triggering_actor }}, commit urls ${{ join(github.event.commits.*.url, ' , ') }}
          details: Publishing Failed!
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
